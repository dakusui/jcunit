package com.github.dakusui.jcunit8.tests.features.pipeline.stages;

import com.github.dakusui.jcunit8.factorspace.Constraint;
import com.github.dakusui.jcunit8.testutils.PipelineTestBase;
import com.github.dakusui.jcunit8.testutils.SchemafulTupleSetUtils;
import com.github.dakusui.jcunit8.testutils.UTUtils;
import org.junit.Test;

import java.util.Objects;

import static com.github.dakusui.jcunit8.testutils.UTUtils.sizeIs;
import static java.util.Arrays.asList;
import static java.util.Collections.emptyList;
import static java.util.Collections.singletonList;

public class EngineTest extends PipelineTestBase {
  @Test
  public void givenOneFactorWithNoConstraint$whenEngine$thenTupleSetGenerated() {
    SchemafulTupleSetUtils.validateSchemafulTupleSet(
        engine(
            singletonList(simpleParameterFactory("V1", "V2").create("simple1")),
            emptyList()
        ),
        UTUtils.matcher(
            sizeIs(
                "==2",
                value -> value == 2
            )
        )
    );
  }

  @Test
  public void givenTwoFactorsWithNoConstraint$whenEngine$thenTupleSetGenerated() {
    SchemafulTupleSetUtils.validateSchemafulTupleSet(
        engine(
            asList(
                simpleParameterFactory("V1", "V2").create("simple1"),
                simpleParameterFactory("V1", "V2").create("simple2")
            ),
            emptyList()
        ),
        UTUtils.matcher(
            sizeIs(
                "==4",
                value -> value == 4
            )
        )
    );
  }

  @Test
  public void given3FactorsWithNoConstraint$whenEngine$thenTupleSetGenerated() {
    SchemafulTupleSetUtils.validateSchemafulTupleSet(
        engine(
            asList(
                simpleParameterFactory("V1", "V2").create("simple1"),
                simpleParameterFactory("V1", "V2").create("simple2"),
                simpleParameterFactory("V1", "V2").create("simple3")
            ),
            emptyList()
        ),
        UTUtils.matcher(
            sizeIs(
                ">0",
                value -> value > 0
            ),
            sizeIs(
                "<generated by cartesian product (8)",
                value -> value < 8
            )
        )
    );
  }

  @Test
  public void givenOneFactorWithConstraint$whenEngine$thenTupleSetGenerated() {
    Constraint constraint = Constraint.create(
        tuple -> !Objects.equals(tuple.get("simple1"), "E1"),
        singletonList("simple1"));
    SchemafulTupleSetUtils.validateSchemafulTupleSet(
        engine(
            singletonList(simpleParameterFactory("V1", "V2", "E1").create("simple1")),
            singletonList(constraint)
        ),
        UTUtils.matcherFromPredicates(
            UTUtils.allSatisfy(constraint)
        )
    );
  }

}
