package com.github.dakusui.jcunit8.ut.parameters;

import com.github.dakusui.jcunit8.factorspace.Constraint;
import com.github.dakusui.jcunit8.testsuite.SchemafulTupleSet;
import org.hamcrest.Matcher;
import org.junit.Test;

import java.util.Objects;
import java.util.function.Predicate;

import static java.lang.String.format;
import static java.util.Arrays.asList;
import static java.util.Collections.emptyList;
import static java.util.Collections.singletonList;
import static org.junit.Assert.assertThat;

public class EngineTest extends PipelineTestBase {
  @Test
  public void whenEngineOneFactorWithoutConstraints$thenTupleSetGenerated() {
    validateSchemafulTupleSet(
        engine(
            singletonList(simpleParameterFactory("V1", "V2").create("simple1")),
            emptyList()
        ),
        matcher(
            sizeIs(
                tag("==2",
                    value -> value == 2
                ))
        )
    );
  }

  @Test
  public void whenEngineTwoFactorsWithoutConstraints$thenTupleSetGenerated() {
    validateSchemafulTupleSet(
        engine(
            asList(
                simpleParameterFactory("V1", "V2").create("simple1"),
                simpleParameterFactory("V1", "V2").create("simple2")
            ),
            emptyList()
        ),
        matcher(
            sizeIs(
                tag("==4",
                    value -> value == 4
                ))
        )
    );
  }

  @Test
  public void whenEngine3FactorsWithoutConstraints$thenTupleSetGenerated() {
    validateSchemafulTupleSet(
        engine(
            asList(
                simpleParameterFactory("V1", "V2").create("simple1"),
                simpleParameterFactory("V1", "V2").create("simple2"),
                simpleParameterFactory("V1", "V2").create("simple3")
            ),
            emptyList()
        ),
        matcher(
            sizeIs(
                tag(">0",
                    value -> value > 0
                )),
            sizeIs(
                tag("<generated by cartesian product (8)",
                    value -> value < 8
                ))
        )
    );
  }

  @Test
  public void whenEngineOneFactorWithConstraint$thenTupleSetGenerated() {
    Constraint constraint = Constraint.create(
        tuple -> !Objects.equals(tuple.get("simple1"), "E1"),
        singletonList("simple1"));
    validateSchemafulTupleSet(
        engine(
            singletonList(simpleParameterFactory("V1", "V2", "E1").create("simple1")),
            singletonList(constraint)
        ),
        matcher(
            noTupleViolates(constraint)
        )
    );
  }

  private static Predicate<SchemafulTupleSet> noTupleViolates(Constraint constraint) {
    return tag(
        format("No tuple violates '%s'", constraint),
        tuples -> tuples.stream()
            .allMatch(constraint)
    );
  }

  private static Predicate<SchemafulTupleSet> sizeIs(Predicate<Integer> predicate) {
    return tag(
        format("Size should be '%s'", predicate),
        (SchemafulTupleSet tupleSet) -> predicate.test(tupleSet.size())
    );
  }

  private static void validateSchemafulTupleSet(SchemafulTupleSet tupleSet, Matcher<SchemafulTupleSet> matcher) {
    tupleSet.forEach(System.out::println);
    assertThat(tupleSet, matcher);
  }
}
